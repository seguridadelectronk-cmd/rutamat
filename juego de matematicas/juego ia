<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juego de Matemáticas</title>
    <style>
        @font-face {
            font-family: 'FunFont';
            src: url('fonts/funfont.ttf') format('truetype');
        }
        
        body {
            margin: 0;
            padding: 0;
            font-family: 'FunFont', Arial, sans-serif;
            background-image: url('imagenes/fondo-juego.jpg');
            background-size: cover;
            background-attachment: fixed;
            color: #fff;
            overflow-x: hidden;
        }
        
        #container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            text-align: center;
        }
        
        h1 {
            font-size: 3em;
            text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.7);
            margin-bottom: 30px;
        }
        
        /* Pantalla de inicio */
        #start-screen {
            display: block;
        }
        
        #name-input {
            padding: 15px;
            font-size: 1.5em;
            border-radius: 20px;
            border: none;
            margin-bottom: 20px;
            width: 300px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        /* Selección de curso */
        #course-selection {
            display: none;
            margin-top: 30px;
        }
        
        .course-btn {
            background-color: #FF6B6B;
            color: white;
            border: none;
            padding: 15px 30px;
            margin: 10px;
            font-size: 1.5em;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .course-btn:hover {
            transform: scale(1.1);
            background-color: #FF8E8E;
        }
        
        /* Área de juego */
        #game-area {
            display: none;
            margin-top: 30px;
        }
        
        #cards-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            width: 200px;
            height: 250px;
            perspective: 1000px;
            cursor: pointer;
            margin: 0 auto;
        }
        
        .card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.8s;
            transform-style: preserve-3d;
        }
        
        .card.flipped .card-inner {
            transform: rotateY(180deg);
        }
        
        .card-front, .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 15px;
            box-sizing: border-box;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .card-front {
            background-color: #4ECDC4;
            background-image: url('imagenes/lunares.png');
            background-size: cover;
            color: white;
        }
        
        .card-back {
            background-color: #FFE66D;
            color: #333;
            transform: rotateY(180deg);
        }
        
        .card-image {
            max-width: 120px;
            max-height: 120px;
            margin-bottom: 10px;
        }
        
        .card-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .math-problem {
            font-size: 1.5em;
            margin-bottom: 15px;
        }
        
        .answer-input {
            padding: 8px;
            font-size: 1.2em;
            width: 80%;
            margin-bottom: 15px;
            text-align: center;
            border-radius: 10px;
            border: 2px solid #ccc;
        }
        
        .submit-btn {
            background-color: #4ECDC4;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .submit-btn:hover {
            background-color: #3DBEB5;
        }
        
        /* Navegación */
        #navigation {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .nav-btn, #finish-btn, #exit-btn {
            background-color: #FF6B6B;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1.1em;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .nav-btn:hover, #finish-btn:hover, #exit-btn:hover {
            transform: scale(1.05);
            background-color: #FF8E8E;
        }
        
        #page-info {
            font-size: 1.2em;
            align-self: center;
        }
        
        /* Contador */
        #counter {
            font-size: 1.2em;
            margin-bottom: 20px;
        }
        
        /* Pantalla de resultados */
        #results-screen {
            display: none;
            margin-top: 30px;
        }
        
        #results-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background-color: rgba(255, 255, 255, 0.8);
            color: #333;
            border-radius: 10px;
            overflow: hidden;
        }
        
        #results-table th, #results-table td {
            padding: 12px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }
        
        #results-table th {
            background-color: #4ECDC4;
            color: white;
        }
        
        #results-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        
        #results-table tr:hover {
            background-color: #ddd;
        }
        
        .result-btn {
            background-color: #FF6B6B;
            color: white;
            border: none;
            padding: 12px 25px;
            margin: 10px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1.2em;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .result-btn:hover {
            transform: scale(1.05);
            background-color: #FF8E8E;
        }
        
        /* Botón de sonido */
        #sound-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: rgba(255, 255, 255, 0.7);
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }
        
        #sound-icon {
            font-size: 24px;
            color: #333;
        }
        
        /* Mensajes */
        .message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            z-index: 1001;
            text-align: center;
            display: none;
            max-width: 80%;
        }
        
        .message-btn {
            background-color: #4ECDC4;
            color: white;
            border: none;
            padding: 8px 15px;
            margin-top: 15px;
            border-radius: 10px;
            cursor: pointer;
        }
        
        /* Animaciones */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 1s infinite;
        }
        
        /* Tarjeta bloqueada */
        .card.locked {
            opacity: 0.7;
            cursor: not-allowed;
        }
        
        .card.locked .card-front {
            background-color: #ccc;
        }
    </style>
</head>
<body>
    <button id="sound-btn" title="Activar/Desactivar sonido">
        <span id="sound-icon">🔊</span>
    </button>
    
    <div id="container">
        <!-- Pantalla de inicio -->
        <div id="start-screen">
            <h1>Juego de Matemáticas</h1>
            <input type="text" id="name-input" placeholder="Ingresa tu nombre" maxlength="20">
            <div id="start-btn" class="course-btn">Comenzar</div>
        </div>
        
        <!-- Selección de curso -->
        <div id="course-selection">
            <h1>Selecciona tu curso</h1>
            <div class="course-btn" data-course="1">Grado 1°</div>
            <div class="course-btn" data-course="2">Grado 2°</div>
            <div class="course-btn" data-course="3">Grado 3°</div>
            <div class="course-btn" data-course="4">Grado 4°</div>
            <div class="course-btn" data-course="5">Grado 5°</div>
        </div>
        
        <!-- Área de juego -->
        <div id="game-area">
            <h1 id="game-title"></h1>
            <div id="counter">Preguntas contestadas: <span id="answered-count">0</span>/30</div>
            
            <div id="navigation">
                <button id="prev-btn" class="nav-btn">Anterior</button>
                <div id="page-info">Página 1 de 5</div>
                <button id="next-btn" class="nav-btn">Siguiente</button>
            </div>
            
            <div id="cards-container"></div>
            
            <div id="game-controls">
                <button id="finish-btn">Terminar y mostrar puntaje</button>
                <button id="exit-btn">Salir</button>
            </div>
        </div>
        
        <!-- Pantalla de resultados -->
        <div id="results-screen">
            <h1>Resultados</h1>
            <div id="player-result"></div>
            
            <table id="results-table">
                <thead>
                    <tr>
                        <th>Posición</th>
                        <th>Nombre</th>
                        <th>Curso</th>
                        <th>Puntos</th>
                        <th>Tiempo</th>
                    </tr>
                </thead>
                <tbody id="results-body">
                    <!-- Los resultados se llenarán aquí -->
                </tbody>
            </table>
            
            <button id="new-player-btn" class="result-btn">Nuevo Jugador</button>
            <button id="end-game-btn" class="result-btn">Finalizar Juego</button>
        </div>
    </div>
    
    <!-- Mensajes -->
    <div id="correct-message" class="message">
        <div id="correct-text">¡Respuesta correcta! ¡Buen trabajo!</div>
        <button class="message-btn">Aceptar</button>
    </div>
    
    <div id="wrong-message" class="message">
        <div>Respuesta incorrecta. ¡Sigue intentando!</div>
        <button class="message-btn">Aceptar</button>
    </div>
    
    <div id="confirm-message" class="message">
        <div>¿Estás seguro que quieres terminar el juego ahora? Se registrarán los puntos acumulados hasta el momento.</div>
        <button id="confirm-yes" class="message-btn">Sí, terminar</button>
        <button id="confirm-no" class="message-btn">No, continuar</button>
    </div>
    
    <!-- Audio -->
    <audio id="flip-sound" src="sonidos/voltear.mp3" preload="auto"></audio>
    <audio id="correct-sound" src="sonidos/correcto.mp3" preload="auto"></audio>
    <audio id="wrong-sound" src="sonidos/incorrecto.mp3" preload="auto"></audio>
    <audio id="background-music" src="sonidos/musica-de-fondo.mp3" loop preload="auto"></audio>
    
    <script>
        // Variables globales
        let playerName = '';
        let selectedCourse = '';
        let currentPage = 1;
        const cardsPerPage = 6;
        let totalCards = 30;
        let totalPages = Math.ceil(totalCards / cardsPerPage);
        let answeredCards = 0;
        let score = 0;
        let startTime = 0;
        let endTime = 0;
        let gameData = {};
        let results = JSON.parse(localStorage.getItem('mathGameResults')) || [];
        let soundEnabled = true;
        
        // Elementos del DOM
        const startScreen = document.getElementById('start-screen');
        const courseSelection = document.getElementById('course-selection');
        const gameArea = document.getElementById('game-area');
        const resultsScreen = document.getElementById('results-screen');
        const nameInput = document.getElementById('name-input');
        const startBtn = document.getElementById('start-btn');
        const courseBtns = document.querySelectorAll('.course-btn[data-course]');
        const gameTitle = document.getElementById('game-title');
        const cardsContainer = document.getElementById('cards-container');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const pageInfo = document.getElementById('page-info');
        const finishBtn = document.getElementById('finish-btn');
        const exitBtn = document.getElementById('exit-btn');
        const answeredCount = document.getElementById('answered-count');
        const playerResult = document.getElementById('player-result');
        const resultsBody = document.getElementById('results-body');
        const newPlayerBtn = document.getElementById('new-player-btn');
        const endGameBtn = document.getElementById('end-game-btn');
        const correctMessage = document.getElementById('correct-message');
        const wrongMessage = document.getElementById('wrong-message');
        const confirmMessage = document.getElementById('confirm-message');
        const correctText = document.getElementById('correct-text');
        const confirmYes = document.getElementById('confirm-yes');
        const confirmNo = document.getElementById('confirm-no');
        const soundBtn = document.getElementById('sound-btn');
        const soundIcon = document.getElementById('sound-icon');
        const flipSound = document.getElementById('flip-sound');
        const correctSound = document.getElementById('correct-sound');
        const wrongSound = document.getElementById('wrong-sound');
        const backgroundMusic = document.getElementById('background-music');
        
        // Datos del juego (simulados)
        const courses = {
            '1': 'Grado 1°',
            '2': 'Grado 2°',
            '3': 'Grado 3°',
            '4': 'Grado 4°',
            '5': 'Grado 5°'
        };
        
        const cardMessages = [
            "¡Excelente trabajo!",
            "¡Lo hiciste genial!",
            "¡Eres un genio de las matemáticas!",
            "¡Respuesta perfecta!",
            "¡Increíble! Sigue así.",
            "¡Maravilloso!",
            "¡Fantástico!",
            "¡Impresionante!",
            "¡Brillante!",
            "¡Asombroso!",
            "¡Perfecto!",
            "¡Insuperable!",
            "¡Eres un crack!",
            "¡Magnífico!",
            "¡Sobresaliente!",
            "¡Estupendo!",
            "¡Fenomenal!",
            "¡Extraordinario!",
            "¡Sensacional!",
            "¡Fantástico!",
            "¡Increíble!",
            "¡Maravilloso!",
            "¡Excelente!",
            "¡Perfecto!",
            "¡Genial!",
            "¡Asombroso!",
            "¡Brillante!",
            "¡Impresionante!",
            "¡Magnífico!",
            "¡Sobresaliente!"
        ];
        
        // Inicializar el juego
        function initGame() {
            // Configurar eventos
            startBtn.addEventListener('click', startGame);
            courseBtns.forEach(btn => btn.addEventListener('click', selectCourse));
            prevBtn.addEventListener('click', goToPrevPage);
            nextBtn.addEventListener('click', goToNextPage);
            finishBtn.addEventListener('click', showConfirmFinish);
            exitBtn.addEventListener('click', exitGame);
            newPlayerBtn.addEventListener('click', newPlayer);
            endGameBtn.addEventListener('click', endGame);
            document.querySelectorAll('.message-btn').forEach(btn => {
                if (btn.id !== 'confirm-yes' && btn.id !== 'confirm-no') {
                    btn.addEventListener('click', hideMessage);
                }
            });
            confirmYes.addEventListener('click', finishGame);
            confirmNo.addEventListener('click', hideMessage);
            soundBtn.addEventListener('click', toggleSound);
            
            // Permitir enviar respuesta con Enter
            document.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && gameArea.style.display === 'block') {
                    const activeCard = document.querySelector('.card.flipped:not(.locked)');
                    if (activeCard) {
                        const submitBtn = activeCard.querySelector('.submit-btn');
                        if (submitBtn) submitBtn.click();
                    }
                }
            });
            
            // Iniciar música de fondo
            backgroundMusic.volume = 0.3;
            if (soundEnabled) backgroundMusic.play();
        }
        
        // Comenzar el juego
        function startGame() {
            playerName = nameInput.value.trim();
            
            if (playerName === '') {
                alert('Por favor ingresa tu nombre');
                return;
            }
            
            startScreen.style.display = 'none';
            courseSelection.style.display = 'block';
        }
        
        // Seleccionar curso
        function selectCourse(e) {
            selectedCourse = e.target.getAttribute('data-course');
            gameTitle.textContent = `${playerName} - ${courses[selectedCourse]}`;
            courseSelection.style.display = 'none';
            gameArea.style.display = 'block';
            
            // Generar datos del juego para este curso
            generateGameData();
            
            // Iniciar temporizador
            startTime = new Date().getTime();
            
            // Mostrar primera página de tarjetas
            showPage(1);
        }
        
        // Generar datos del juego
        function generateGameData() {
            gameData = {
                cards: []
            };
            
            for (let i = 1; i <= totalCards; i++) {
                // Generar problema matemático según el grado
                let problem = '';
                let answer = 0;
                
                switch(selectedCourse) {
                    case '1': // Grado 1
                        const num1 = Math.floor(Math.random() * 10) + 1;
                        const num2 = Math.floor(Math.random() * 10) + 1;
                        problem = `${num1} + ${num2} = ?`;
                        answer = num1 + num2;
                        break;
                    case '2': // Grado 2
                        const n1 = Math.floor(Math.random() * 20) + 1;
                        const n2 = Math.floor(Math.random() * 20) + 1;
                        if (Math.random() > 0.5) {
                            problem = `${n1} + ${n2} = ?`;
                            answer = n1 + n2;
                        } else {
                            problem = `${Math.max(n1, n2)} - ${Math.min(n1, n2)} = ?`;
                            answer = Math.max(n1, n2) - Math.min(n1, n2);
                        }
                        break;
                    case '3': // Grado 3
                        const x1 = Math.floor(Math.random() * 10) + 1;
                        const x2 = Math.floor(Math.random() * 10) + 1;
                        const x3 = Math.floor(Math.random() * 4) + 2;
                        if (Math.random() > 0.5) {
                            problem = `${x1} × ${x2} = ?`;
                            answer = x1 * x2;
                        } else {
                            problem = `${x1 * x3} ÷ ${x3} = ?`;
                            answer = x1;
                        }
                        break;
                    case '4': // Grado 4
                        const y1 = Math.floor(Math.random() * 12) + 1;
                        const y2 = Math.floor(Math.random() * 12) + 1;
                        const y3 = Math.floor(Math.random() * 3) + 2;
                        if (Math.random() > 0.33) {
                            problem = `${y1} × ${y2} = ?`;
                            answer = y1 * y2;
                        } else if (Math.random() > 0.66) {
                            problem = `${y1 * y3} ÷ ${y3} = ?`;
                            answer = y1;
                        } else {
                            const sum = y1 + y2;
                            problem = `${sum} - ${y2} = ?`;
                            answer = y1;
                        }
                        break;
                    case '5': // Grado 5
                        const z1 = Math.floor(Math.random() * 15) + 1;
                        const z2 = Math.floor(Math.random() * 15) + 1;
                        const z3 = Math.floor(Math.random() * 5) + 2;
                        if (Math.random() > 0.25) {
                            problem = `${z1} × ${z2} + ${z3} = ?`;
                            answer = z1 * z2 + z3;
                        } else if (Math.random() > 0.5) {
                            problem = `(${z1} + ${z2}) × ${z3} = ?`;
                            answer = (z1 + z2) * z3;
                        } else if (Math.random() > 0.75) {
                            problem = `${z1 * z3} ÷ ${z3} + ${z2} = ?`;
                            answer = z1 + z2;
                        } else {
                            problem = `${z1 * z2} - ${z3} = ?`;
                            answer = z1 * z2 - z3;
                        }
                        break;
                }
                
                gameData.cards.push({
                    id: i,
                    title: `Lugar ${i}`,
                    image: `imagenes/lugar${i}.jpg`, // Imágenes simuladas
                    problem: problem,
                    answer: answer,
                    answered: false,
                    correct: false,
                    message: cardMessages[i-1]
                });
            }
        }
        
        // Mostrar página de tarjetas
        function showPage(page) {
            currentPage = page;
            cardsContainer.innerHTML = '';
            
            const startIndex = (page - 1) * cardsPerPage;
            const endIndex = Math.min(startIndex + cardsPerPage, totalCards);
            
            for (let i = startIndex; i < endIndex; i++) {
                const card = gameData.cards[i];
                createCardElement(card);
            }
            
            // Actualizar navegación
            pageInfo.textContent = `Página ${page} de ${totalPages}`;
            prevBtn.style.display = page === 1 ? 'none' : 'block';
            nextBtn.style.display = page === totalPages ? 'none' : 'block';
            
            // Actualizar contador
            updateCounter();
        }
        
        // Crear elemento de tarjeta
        function createCardElement(card) {
            const cardElement = document.createElement('div');
            cardElement.className = `card ${card.answered ? 'locked' : ''}`;
            cardElement.dataset.id = card.id;
            
            const cardInner = document.createElement('div');
            cardInner.className = 'card-inner';
            
            // Frente de la tarjeta
            const cardFront = document.createElement('div');
            cardFront.className = 'card-front';
            
            const cardImage = document.createElement('img');
            cardImage.className = 'card-image';
            cardImage.src = card.image;
            cardImage.alt = card.title;
            
            const frontTitle = document.createElement('div');
            frontTitle.className = 'card-title';
            frontTitle.textContent = card.title;
            
            cardFront.appendChild(cardImage);
            cardFront.appendChild(frontTitle);
            
            // Reverso de la tarjeta
            const cardBack = document.createElement('div');
            cardBack.className = 'card-back';
            
            const mathProblem = document.createElement('div');
            mathProblem.className = 'math-problem';
            mathProblem.textContent = card.problem;
            
            const answerInput = document.createElement('input');
            answerInput.className = 'answer-input';
            answerInput.type = 'number';
            answerInput.placeholder = 'Respuesta';
            answerInput.disabled = card.answered;
            
            const submitBtn = document.createElement('button');
            submitBtn.className = 'submit-btn';
            submitBtn.textContent = 'Responder';
            submitBtn.disabled = card.answered;
            
            cardBack.appendChild(mathProblem);
            cardBack.appendChild(answerInput);
            cardBack.appendChild(submitBtn);
            
            // Evento para voltear tarjeta
            if (!card.answered) {
                cardFront.addEventListener('click', function() {
                    flipCard(cardElement);
                });
            }
            
            // Evento para responder
            submitBtn.addEventListener('click', function() {
                checkAnswer(card, answerInput.value, cardElement);
            });
            
            cardInner.appendChild(cardFront);
            cardInner.appendChild(cardBack);
            cardElement.appendChild(cardInner);
            cardsContainer.appendChild(cardElement);
        }
        
        // Voltear tarjeta
        function flipCard(cardElement) {
            if (soundEnabled) flipSound.play();
            cardElement.classList.add('flipped');
        }
        
        // Verificar respuesta
        function checkAnswer(card, userAnswer, cardElement) {
            const correct = parseFloat(userAnswer) === card.answer;
            
            if (correct) {
                score += 10; // 10 puntos por respuesta correcta
                card.correct = true;
                correctText.textContent = card.message;
                
                if (soundEnabled) correctSound.play();
                showMessage(correctMessage);
            } else {
                if (soundEnabled) wrongSound.play();
                showMessage(wrongMessage);
            }
            
            card.answered = true;
            answeredCards++;
            
            // Bloquear tarjeta después de responder
            setTimeout(() => {
                cardElement.classList.remove('flipped');
                cardElement.classList.add('locked');
                updateCounter();
                
                // Verificar si se completó el juego
                if (answeredCards === totalCards) {
                    finishGame();
                }
            }, 500);
        }
        
        // Actualizar contador
        function updateCounter() {
            answeredCount.textContent = answeredCards;
        }
        
        // Navegación entre páginas
        function goToPrevPage() {
            if (currentPage > 1) {
                showPage(currentPage - 1);
            }
        }
        
        function goToNextPage() {
            if (currentPage < totalPages) {
                showPage(currentPage + 1);
            }
        }
        
        // Mostrar mensaje de confirmación para terminar
        function showConfirmFinish() {
            showMessage(confirmMessage);
        }
        
        // Terminar juego y mostrar resultados
        function finishGame() {
            hideMessage();
            endTime = new Date().getTime();
            const timeInSeconds = Math.floor((endTime - startTime) / 1000);
            
            // Guardar resultado
            const result = {
                name: playerName,
                course: courses[selectedCourse],
                score: score,
                time: timeInSeconds,
                date: new Date().toISOString()
            };
            
            results.push(result);
            
            // Ordenar resultados (primero por puntaje, luego por tiempo)
            results.sort((a, b) => {
                if (b.score !== a.score) {
                    return b.score - a.score;
                } else {
                    return a.time - b.time;
                }
            });
            
            // Guardar en localStorage
            localStorage.setItem('mathGameResults', JSON.stringify(results));
            
            // Mostrar pantalla de resultados
            showResults(result);
        }
        
        // Mostrar resultados
        function showResults(currentResult) {
            gameArea.style.display = 'none';
            resultsScreen.style.display = 'block';
            
            // Mostrar resultado del jugador actual
            playerResult.innerHTML = `
                <h2>${currentResult.name} (${currentResult.course}): 
                ${currentResult.score} puntos en ${currentResult.time} segundos</h2>
            `;
            
            // Llenar tabla de resultados
            resultsBody.innerHTML = '';
            results.forEach((result, index) => {
                const row = document.createElement('tr');
                if (result.name === currentResult.name && result.date === currentResult.date) {
                    row.classList.add('pulse');
                }
                
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${result.name}</td>
                    <td>${result.course}</td>
                    <td>${result.score}</td>
                    <td>${result.time} seg</td>
                `;
                
                resultsBody.appendChild(row);
            });
        }
        
        // Salir del juego
        function exitGame() {
            if (confirm('¿Estás seguro que quieres salir? Perderás tu progreso actual.')) {
                resetGame();
                startScreen.style.display = 'block';
                gameArea.style.display = 'none';
                nameInput.value = '';
            }
        }
        
        // Nuevo jugador
        function newPlayer() {
            resetGame();
            resultsScreen.style.display = 'none';
            startScreen.style.display = 'block';
            nameInput.value = '';
        }
        
        // Finalizar juego (borrar resultados)
        function endGame() {
            if (confirm('¿Estás seguro que quieres finalizar el juego? Se borrarán todos los resultados.')) {
                results = [];
                localStorage.removeItem('mathGameResults');
                resetGame();
                resultsScreen.style.display = 'none';
                startScreen.style.display = 'block';
                nameInput.value = '';
            }
        }
        
        // Reiniciar juego
        function resetGame() {
            playerName = '';
            selectedCourse = '';
            currentPage = 1;
            answeredCards = 0;
            score = 0;
            startTime = 0;
            endTime = 0;
            gameData = {};
        }
        
        // Mostrar mensaje
        function showMessage(messageElement) {
            messageElement.style.display = 'block';
        }
        
        // Ocultar mensaje
        function hideMessage() {
            document.querySelectorAll('.message').forEach(msg => {
                msg.style.display = 'none';
            });
        }
        
        // Activar/desactivar sonido
        function toggleSound() {
            soundEnabled = !soundEnabled;
            
            if (soundEnabled) {
                soundIcon.textContent = '🔊';
                backgroundMusic.play();
            } else {
                soundIcon.textContent = '🔇';
                backgroundMusic.pause();
            }
        }
        
        // Iniciar el juego cuando se carga la página
        window.addEventListener('DOMContentLoaded', initGame);
    </script>
</body>
</html>